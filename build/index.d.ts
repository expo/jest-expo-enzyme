import { Config } from '@jest/types';
export default function withEnzyme(preset: Config.ProjectConfig): {
    setupFilesAfterEnv: string[];
    snapshotSerializers: string[];
    testEnvironmentOptions: {
        enzymeAdapter: string;
    };
    testEnvironment: string;
    automock: boolean;
    cache: boolean;
    cacheDirectory: string;
    clearMocks: boolean;
    coveragePathIgnorePatterns: string[];
    cwd: string;
    dependencyExtractor?: string | undefined;
    detectLeaks: boolean;
    detectOpenHandles: boolean;
    displayName?: Config.DisplayName | undefined;
    errorOnDeprecated: boolean;
    extensionsToTreatAsEsm: string[];
    fakeTimers: Config.GlobalFakeTimersConfig & ((Config.FakeTimersConfig & {
        now?: number | undefined;
    }) | Config.LegacyFakeTimersConfig);
    filter?: string | undefined;
    forceCoverageMatch: string[];
    globalSetup?: string | undefined;
    globalTeardown?: string | undefined;
    globals: Config.ConfigGlobals;
    haste: Config.HasteConfig;
    id: string;
    injectGlobals: boolean;
    moduleDirectories: string[];
    moduleFileExtensions: string[];
    moduleNameMapper: [string, string][];
    modulePathIgnorePatterns: string[];
    modulePaths?: string[] | undefined;
    preset?: string | undefined;
    prettierPath: string;
    resetMocks: boolean;
    resetModules: boolean;
    resolver?: string | undefined;
    restoreMocks: boolean;
    rootDir: string;
    roots: string[];
    runner: string;
    runtime?: string | undefined;
    sandboxInjectedGlobals: ("undefined" | "globalThis" | "eval" | "parseInt" | "parseFloat" | "isNaN" | "isFinite" | "decodeURI" | "decodeURIComponent" | "encodeURI" | "encodeURIComponent" | "escape" | "unescape" | "NaN" | "Infinity" | "Symbol" | "Object" | "Function" | "String" | "Boolean" | "Number" | "Math" | "Date" | "RegExp" | "Error" | "EvalError" | "RangeError" | "ReferenceError" | "SyntaxError" | "TypeError" | "URIError" | "JSON" | "Array" | "Promise" | "ArrayBuffer" | "DataView" | "Int8Array" | "Uint8Array" | "Uint8ClampedArray" | "Int16Array" | "Uint16Array" | "Int32Array" | "Uint32Array" | "Float32Array" | "Float64Array" | "Intl" | "Map" | "WeakMap" | "Set" | "WeakSet" | "Proxy" | "Reflect" | "SharedArrayBuffer" | "Atomics" | "BigInt" | "BigInt64Array" | "BigUint64Array" | "structuredClone" | "process" | "console" | "__filename" | "__dirname" | "require" | "module" | "exports" | "gc" | "AbortController" | "AbortSignal" | "Blob" | "global" | "React" | "clearInterval" | "clearTimeout" | "setInterval" | "setTimeout" | "clearImmediate" | "setImmediate" | "cancelAnimationFrame" | "requestAnimationFrame" | "fetchBundle" | "fetch" | "Headers" | "Request" | "Response" | "XMLHttpRequest" | "XMLHttpRequestUpload" | "WebSocket" | "FileReader" | "atob" | "btoa" | "Buffer" | "queueMicrotask")[];
    setupFiles: string[];
    skipFilter: boolean;
    skipNodeResolution?: boolean | undefined;
    slowTestThreshold: number;
    snapshotResolver?: string | undefined;
    snapshotFormat: Partial<{
        readonly callToJSON: boolean;
        readonly compareKeys: null;
        readonly escapeRegex: boolean;
        readonly escapeString: boolean;
        readonly highlight: boolean;
        readonly indent: number;
        readonly maxDepth: number;
        readonly maxWidth: number;
        readonly min: boolean;
        readonly printBasicPrototype: boolean;
        readonly printFunctionName: boolean;
        readonly theme: Partial<{
            readonly comment: string;
            readonly content: string;
            readonly prop: string;
            readonly tag: string;
            readonly value: string;
        }>;
    }>;
    testMatch: string[];
    testLocationInResults: boolean;
    testPathIgnorePatterns: string[];
    testRegex: (string | RegExp)[];
    testRunner: string;
    transform: [string, string, Record<string, unknown>][];
    transformIgnorePatterns: string[];
    watchPathIgnorePatterns: string[];
    unmockedModulePathPatterns?: string[] | undefined;
    workerIdleMemoryLimit?: number | undefined;
} | undefined;
export { withEnzyme };
//# sourceMappingURL=index.d.ts.map