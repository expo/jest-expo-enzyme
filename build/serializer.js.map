{"version":3,"file":"serializer.js","sourceRoot":"","sources":["../src/serializer.ts"],"names":[],"mappings":";;AAAA,iCAAqD;AACrD,+CAA0C;AAE1C,SAAS,MAAM,CAAC,UAA4C;IAC1D,SAAS,iBAAiB,CAAC,IAAU;QACnC,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;YACtB,wCAAwC;YACxC,MAAM,SAAS,GAA2B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;gBACrF,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC/B,IAAI,IAAA,sBAAc,EAAC,KAAK,CAAC,EAAE;oBACzB,GAAG,CAAC,IAAI,CAAC,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC;iBACtC;gBACD,OAAO,GAAG,CAAC;YACb,CAAC,EAAE,EAA4B,CAAC,CAAC;YAEjC,sDAAsD;YACtD,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;gBACpB,MAAM,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACnD,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;oBACjC,SAAS,CAAC,KAAK,GAAG,KAAK,CAAC;iBACzB;qBAAM;oBACL,OAAO,SAAS,CAAC,KAAK,CAAC;iBACxB;aACF;YAED,MAAM,IAAI,GAAG,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YAE/B,4BAA4B;YAC5B,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;YACtD,IAAI,QAAQ,EAAE;gBACZ,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;oBAC3B,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;wBACzB,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;oBACtC,CAAC,CAAC,CAAC;iBACJ;qBAAM;oBACL,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC;iBACxC;aACF;YAED,OAAO,oBAAY,CAAC,KAAK,CAAC,oBAAY,EAAE,IAAW,CAAC,CAAC;SACtD;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO;QACL,IAAI,CAAC,KAAU;YACb,OAAO,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,KAAK,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QACrE,CAAC;QACD,KAAK,CAAC,KAAU,EAAE,SAA+B;YAC/C,OAAO,SAAS,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;QAC7C,CAAC;KACF,CAAC;AACJ,CAAC;AAED,kBAAe,MAAM,CAAC,yBAAU,CAAC,CAAC","sourcesContent":["import { cloneElement, isValidElement } from 'react';\nimport { StyleSheet } from 'react-native';\n\nfunction create(StyleSheet: { flatten: (style: any) => any }): any {\n  function flattenNodeStyles(node?: any): any {\n    if (node && node.props) {\n      // check for React elements in any props\n      const nextProps: { [key: string]: any } = Object.keys(node.props).reduce((acc, curr) => {\n        const value = node.props[curr];\n        if (isValidElement(value)) {\n          acc[curr] = flattenNodeStyles(value);\n        }\n        return acc;\n      }, {} as { [key: string]: any });\n\n      // flatten styles and avoid empty objects in snapshots\n      if (node.props.style) {\n        const style = StyleSheet.flatten(node.props.style);\n        if (Object.keys(style).length > 0) {\n          nextProps.style = style;\n        } else {\n          delete nextProps.style;\n        }\n      }\n\n      const args = [node, nextProps];\n\n      // recurse over children too\n      const children = node.children || node.props.children;\n      if (children) {\n        if (Array.isArray(children)) {\n          children.forEach((child) => {\n            args.push(flattenNodeStyles(child));\n          });\n        } else {\n          args.push(flattenNodeStyles(children));\n        }\n      }\n\n      return cloneElement.apply(cloneElement, args as any);\n    }\n\n    return node;\n  }\n\n  return {\n    test(value: any): boolean {\n      return !!value && value.$$typeof === Symbol.for('react.test.json');\n    },\n    print(value: any, serialize: (val: any) => string): string {\n      return serialize(flattenNodeStyles(value));\n    },\n  };\n}\n\nexport default create(StyleSheet);\n"]}